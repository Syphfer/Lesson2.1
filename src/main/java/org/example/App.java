//implements - реализация от интерефейса, можно наследоваться от нескольких интерфейсов через запятую
//методы в интерфейсе прописываются без защиты, например void без private
//@Override метод - в каждом классе надо прописывать оверрайд метода интерфейса
//class enum - перечислить константы

//Практическое задание
//1. Создайте три класса Человек, Кот, Робот, которые не наследуются от одного класса. Эти
//классы должны уметь бегать и прыгать (методы просто выводят информацию о действии в
//консоль).
//2. Создайте два класса: беговая дорожка и стена, при прохождении через которые, участники
//должны выполнять соответствующие действия (бежать или прыгать), результат выполнения
//печатаем в консоль (успешно пробежал, не смог пробежать и т.д.).
//3. Создайте два массива: с участниками и препятствиями, и заставьте всех участников пройти
//этот набор препятствий.
//4. * У препятствий есть длина (для дорожки) или высота (для стены), а участников ограничения
//на бег и прыжки. Если участник не смог пройти одно из препятствий, то дальше по списку он
//препятствий не идет.

package org.example;


public class App {

    public static void main(String[] args) {
        ObstructionCheck[] obstructions = {
                new Wall(2), new RunningPad(2)
        };
        Challenger[] challengers = {
                new Human(2, 1), new Cat(1, 2), new Robot(5, 5)
        };
        for (Challenger c : challengers) {
            for (ObstructionCheck o : obstructions) {
                o.Challenge(c);
            }
        }
    }
}